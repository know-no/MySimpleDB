package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate joinPredicate;
    DbIterator child1;
    DbIterator child2;
    TupleDesc desc;
    Iterator<Tuple> tuples = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.desc = this.getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        TupleDesc desc = child1.getTupleDesc();
        return desc.getFieldName(joinPredicate.getField1());

    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        TupleDesc desc = child2.getTupleDesc();
        return desc.getFieldName(joinPredicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     * @see Join#fetchNext() 来看 这里的实现是不需要去掉重复的列
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        int index = 0 ;
        TupleDesc tupleDesc1 = child1.getTupleDesc();
        TupleDesc tupleDesc2 = child2.getTupleDesc();

        Type[] types = new Type[tupleDesc1.numFields() + tupleDesc2.numFields() ];
        String[] names = new String[types.length ];
        return TupleDesc.merge(tupleDesc1, tupleDesc2);
//        String name1 = tupleDesc1.getFieldName(joinPredicate.getField1());
//        String name2 = tupleDesc2.getFieldName(joinPredicate.getField2());
//        String name = name1 + name2 ;
//        Type type = tupleDesc1.getFieldType(joinPredicate.getField1());
//        types[0] = type;
//        names[0] = name;
//
//        for(TupleDesc.TDItem td: tupleDesc1.getItems()){
//            if(td.fieldName != name1){
//                types[index] = td.fieldType;
//                names[index] = td.fieldName;
//                index ++;
//            }
//        }
//
//        for(TupleDesc.TDItem td: tupleDesc2.getItems()){
//            if(td.getFieldName() != name2){
//                types[index] = td.fieldType;
//                names[index] = td.fieldName;
//                index ++;
//            }
//        }
//
//        return new TupleDesc(types, names);

    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child2.open();
        child1.open();
        tuples = this.join();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
        this.tuples = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child2.rewind();
        child1.rewind();
        tuples = this.join();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if(tuples == null) throw new DbException("not opened");
        if(tuples.hasNext())
            return tuples.next();
        return null;
    }

    private Iterator<Tuple> join() throws DbException, TransactionAbortedException {
        ArrayList<Tuple> tuples = new ArrayList<Tuple>();

        while(child1.hasNext()){
            Tuple tuple1 = child1.next();
//            System.out.println(tuple1);
            while (child2.hasNext()){
                Tuple tuple2 = child2.next();
//                System.out.println("tuple2 : " + tuple2);
                if(joinPredicate.filter(tuple1, tuple2)){
                    Tuple one = new Tuple(desc);
                    buildTuple(one, tuple1, tuple2);
                    tuples.add(one);
                }
            }
            child2.rewind();
        }
//        for(Tuple t: tuples){
//            System.out.println(t);
//
//        }

        return tuples.iterator();
    }

    private void buildTuple(Tuple one, Tuple t1, Tuple t2){
        int index = 0;
        Iterator<Field> iterator = t1.fields();
        while (iterator.hasNext()){
            one.setField(index ++ , iterator.next());
        }
        iterator = t2.fields();
        while (iterator.hasNext()){
            one.setField(index ++ , iterator.next());
        }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{child1,child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
